// Code generated by mockery v2.33.0. DO NOT EDIT.

package management

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockAuthProvider is an autogenerated mock type for the authProvider type
type mockAuthProvider struct {
	mock.Mock
}

// CreateAdminAPIKey provides a mock function with given fields: ctx, name
func (_m *mockAuthProvider) CreateAdminAPIKey(ctx context.Context, name string) (int64, string, error) {
	ret := _m.Called(ctx, name)

	var r0 int64
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, string, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) string); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateServiceAccountAndToken provides a mock function with given fields: ctx, name
func (_m *mockAuthProvider) CreateServiceAccountAndToken(ctx context.Context, name string) (int64, string, error) {
	ret := _m.Called(ctx, name)

	var r0 int64
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, string, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) string); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// newMockAuthProvider creates a new instance of mockAuthProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockAuthProvider(t interface {
	mock.TestingT
	Cleanup(func())
},
) *mockAuthProvider {
	mock := &mockAuthProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
